<!DOCTYPE html>
<html>
<head>
  <title>Mappy Data</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  <script src="http://maps.google.com/maps/api/js?v=3&sensor=false"></script>
	<style type="text/css">
	 	html, body {
				height: 100%;
				width: 100%;
		}
		#map { height: 100%; }
	</style>
</head>
<div id='map'></div>

<script type="text/javascript">

	////////////////////////////////////////////
	// init osm map layer
	var attributionOSM = '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors';
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init osm map layer
	var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	})
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init black and white map layer
	var blackAndWhite = L.tileLayer(
	    'http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	});
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init google map layers
	var googleRoadmap = new L.Google('ROADMAP');
	var googleSatellite = new L.Google('SATELLITE');
	var googleTerrain = new L.Google('TERRAIN')
	var googleHybrid = new L.Google('HYBRID')
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init census block map layer		
	var censusBlockGroups = new L.TileLayer.WMS("http://tigerweb.geo.census.gov/arcgis/services/TIGERweb/tigerWMS_Census2010/MapServer/WMSServer",
	{
	  layers: 'Census Block Groups',
	  format: 'image/png',
	  transparent: true,
	  detectRetina: true,
	  //unloadInvisibleTiles: true,
	  reuseTiles: true,
	  // attribution: TigerAttribution
	});
	//censusBlockGroups.addTo(map);
	////////////////////////////////////////////


	////////////////////////////////////////////
	// init map, corresponds to map container(div id = map)
	var map = L.map('map', {
	    center: [36, -96],
		zoom: 12,
		layers: [osm],
		loadingControl: false
	});

	////////////////////////////////////////////
	// add Open Street Maps Building (3-D Buildings)
	var osmBuildings = new OSMBuildings(map).load();
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add scale bar to map	
	L.control.scale().addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add layer control tool to map
	var baseMaps = {
		'Open Street Map': osm,
		'Black & White Map': blackAndWhite,
		'Google Roadmap': googleRoadmap,
		'Google Terrain': googleTerrain,
		'Google Hybrid': googleHybrid
		//'Google Satellite': googleSatellite

	}
	// define overlays
	var overLays = {
		'3-D Buildings': osmBuildings,
		'Block Groups': censusBlockGroups
	}
	// create the layer control widget on the map
	L.control.layers(baseMaps, overLays).addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// this will get the bounds of the map on the initial page load
	var bounds = map.getBounds();
	console.log("Initial Bounds: ", bounds);
	////////////////////////////////////////////


	// this will subsequently get the bounds of the
	// map on further map changes
	map.on('moveend', function (e) {
		console.log("")
		console.log("Map Moved (New Bounds):")
		console.log("Event: moveend", map.getBounds()); 
		console.log("Zoom: ", map.getZoom())
		console.log("Center: ", map.getCenter().lat, map.getCenter().lng)
	});
	////////////////////////////////////////////


	////////////////////////////////////////////
	// draw tool
	// Initialise the FeatureGroup to store editable layers
	var tempDrawn = new L.FeatureGroup();
	var tempStaging = new L.FeatureGroup();
	var userLayer = new L.FeatureGroup()
	map.addLayer(tempDrawn, tempStaging, userLayer);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
	    edit: { featureGroup: tempDrawn }, 
	    draw: { polyline: { metric: false }}
	});

	map.addControl(drawControl);

	map.on('draw:created', function (e) {
		
		layerType = e.layerType;
		layer = e.layer;
		
		console.log("Layer Type: ", layerType)

		if (["polygon", "rectangle"].indexOf(layerType) >= 0) {	
			// dump coordinates of polygon
			for (n = 0; n < layer._latlngs.length; n++) {
				console.log(layer._latlngs[n].lat, layer._latlngs[n].lng, "(lat/lng)")
			}
		} else if (layerType === "circle") {
			console.log(layer._latlng.lat, layer._latlng.lng, ("center"))
			console.log(layer._mRadius, " radius (metres)")
		}
		alertify.success("Polygon Created")
		
		alertify.confirm("Save " + layerType + "?", function (e) {

			if (e) {
				console.log("Save It")
			} else {
				console.log("Delete It")
			}
		})

		// alertify.error("Error")
		
	})
	////////////////////////////////////////////
</script>
<body>

<%= yield %>

</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <title>Mappy Data</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  <script src="https://maps.google.com/maps/api/js?v=3&sensor=false"></script>
	<script src="http://js.api.here.com/v3/3.0/mapsjs-core.js"
          	type="text/javascript" charset="utf-8"></script>
          <script src="http://js.api.here.com/v3/3.0/mapsjs-service.js"
          	type="text/javascript" charset="utf-8"></script>  
	<style type="text/css">
	
	 	html, body {
				height: 100%;
				width: 100%;
		}
		#map { height: 100%; }
/*		.geocodeControl {
			position: absolute;
			top: 5%;
  			left: 100%;
		}*/
		#geocodeControl {
			margin: auto 0; /*centered x and y*/
		}
	</style>
</head>
<body>
<div id='map'>
	<!-- <input type='textbox'></input> -->
</div>

<script type="text/javascript">



var marker;
var isoChrone;


var isoChrone = []
isoChrone.push("")
isoChrone.push("")
isoChrone.push("")

function createIsochrone(latitude, longitude, time, color, setBounds, clearIsoLayer) {
		$.ajax({
    	url: 'https://route.st.nlp.nokia.com/routing/6.2/calculateisoline.json',
    	type: 'GET',
    	datatype: 'jsonp',
    	//data: 'mode=fastest;car;traffic:disabled&start=30.451005399999996, -97.6132245&time=PT0H10M&app_id=hQG4ZX6W0D2sUfQJeb0t&app_code=R82WCNW4u11a93myPTaMpg'
		data: 'mode=fastest;car;traffic:disabled&start=' + latitude + ',' + longitude + '&time=' + time + '&app_id=hQG4ZX6W0D2sUfQJeb0t&app_code=R82WCNW4u11a93myPTaMpg'

	}).done (function (result) {

		// number of point in isoChrone
		length = result.Response.isolines[0].value.length

		var isoChronePoints = [];
		for (n= 0; n < length - 1; n++) {

			valueSplit = result.Response.isolines[0].value[n].split(",")
			isoChronePoints.push(L.latLng(valueSplit[0], valueSplit[1]))
		}
		isoChrone = L.polygon(isoChronePoints, color).addTo(map);

		// zoom the map to the polygon
		if (setBounds) { 
			map.fitBounds(isoChrone.getBounds());
		}

console.log("START")

		var geoJSON = L.polygon(isoChronePoints, color).toGeoJSON()
		//var geoJSON = L.polygon(isoChronePoints, color)
		// console.log(JSON.stringify(geoJSON))
		//console.log(geoJSON)
geoJSON = JSON.stringify(geoJSON)
		$.ajax({
		    url: "/insert_iso_shape.json",
		    type: "POST",
		    data: {polygon: geoJSON}
		}).done(function (data) {
		    console.log(data)
		});
console.log("FINISH")
	});
};





	////////////////////////////////////////////
	// init osm map layer
	var attributionOSM = '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors';
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init osm map layer
	var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	})
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init black and white map layer
	var blackAndWhite = L.tileLayer(
	    'http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	});
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init google map layers
	var googleRoadmap = new L.Google('ROADMAP');
	var googleSatellite = new L.Google('SATELLITE');
	var googleTerrain = new L.Google('TERRAIN')
	var googleHybrid = new L.Google('HYBRID')
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init census block map layer		
	var censusBlockGroups = new L.TileLayer.WMS("http://tigerweb.geo.census.gov/arcgis/services/TIGERweb/tigerWMS_Census2010/MapServer/WMSServer",
	{
	  layers: 'Census Block Groups',
	  format: 'image/png',
	  transparent: true,
	  detectRetina: true,
	  //unloadInvisibleTiles: true,
	  reuseTiles: true,
	  // attribution: TigerAttribution
	});
	//censusBlockGroups.addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// set intial lat, long to center of the U.S.
	var latitude = 35.746512259918504
	var longitude = -96.9873046875
	var zoom = 4
	////////////////////////////////////////////

	////////////////////////////////////////////
	// determine geolocation of user
	var options = { timeout: 15000 };

	function success(location) {

		var latitude = location.coords.latitude;
		var longitude = location.coords.longitude;

		// pan and zoom to location
		var myLatLng = L.latLng(location.coords.latitude, location.coords.longitude);
		//map.setView(myLatLng, 12)   // change to 16

		// add marker to map for initial location
		marker = L.marker([latitude, longitude], {
			bounceOnAdd: true, 
			bounceOnAddOptions: { duration: 3000, height: 700 }
		}).addTo(map).bindPopup('<center>Your approximate location<br>(More or less ' + location.coords.accuracy + '  metres)</center>');

		// map.removeLayer(userLayer)
		// var userLayer = new L.FeatureGroup()
		// map.addLayer(userLayer);
		// alert(map.hasLayer(isoChrone))
		if (map.hasLayer(isoChrone)) { 
			console.log("IsoLayer Removed")
			map.removeLayer(isoChrone) 
		};

		createIsochrone(latitude, longitude, "PT0H10M", {color: 'red'}, true, true)
		// createIsochrone(latitude, longitude, "PT0H8M", {color: 'blue'}, false, false)
		// createIsochrone(latitude, longitude, "PT0H5M", {color: 'green'}, false, false)
		alertify.success("Drive Time Polygons Created")
	};

	function error(error) {
		console.log(error)
	}

	navigator.geolocation.getCurrentPosition(success, error, options)

	////////////////////////////////////////////


	////////////////////////////////////////////
	// init map, corresponds to map container(div id = map)
	var map = L.map('map', {
	    center: [latitude, longitude],
		zoom: zoom,
		layers: [osm],
		loadingControl: true
	});

	////////////////////////////////////////////
	// add Open Street Maps Building (3-D Buildings)
	var osmBuildings = new OSMBuildings(map).load();
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add scale bar to map	
	L.control.scale().addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add layer control tool to map
	var baseMaps = {
		'Open Street Map': osm,
		'Monochrome Map': blackAndWhite,
		'Google Roadmap': googleRoadmap,
		'Google Terrain': googleTerrain,
		'Google Hybrid': googleHybrid
		//'Google Satellite': googleSatellite

	}
	// define overlays
	var overLays = {
		'3-D Buildings': osmBuildings,
		'Block Groups': censusBlockGroups
	}
	// create the layer control widget on the map
	L.control.layers(baseMaps, overLays).addTo(map);
	////////////////////////////////////////////


	////////////////////////////////////////////
	// add geocode input box and listeners
	// that prevent map manipulation while
	// mouseover of the input box


	function geocodeAddress() {

		var geocodeText = document.getElementById('geocode').value;
		console.log(geocodeText)

		geocoder = new google.maps.Geocoder()
		geocoder.geocode( { 'address': geocodeText}, function(results, status) {
			console.log(status)
			if (status == "OK") {
				console.log(results)
				var longitude = results[0].geometry.location.B
				var latitude = results[0].geometry.location.k
				//console.log(latitude, longitude)

				var myLatLng = L.latLng(latitude, longitude);
				
				//map.setView(myLatLng, 16)
				var foundAddress = results[0].formatted_address;

				// add marker to map
				map.removeLayer(marker)

				marker = L.marker([latitude, longitude], {
					bounceOnAdd: true, 
					bounceOnAddOptions: { duration: 3000, height: 700 }
				}).addTo(map).bindPopup('<center>' + foundAddress + '</center>');

				alertify.success("Geocoded: " + foundAddress)

		// map.removeLayer(userLayer)
		// var userLayer = new L.FeatureGroup()
		// map.addLayer(userLayer);
		// alert(map.hasLayer(isoChrone))
		if (map.hasLayer(isoChrone)) { 
			console.log("IsoLayer Removed")
			map.removeLayer(isoChrone) 
		};
				createIsochrone(latitude, longitude, "PT0H10M", {color: 'red'}, true, true)
				// createIsochrone(latitude, longitude, "PT0H8M", {color: 'blue'}, false, false)
				// createIsochrone(latitude, longitude, "PT0H5M", {color: 'green'}, false, false)
				alertify.success("Drive Time Polygons Created")
			} else {
				alertify.error("Unable to geocode")
			}


		})
		//https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA
		console.log("trace")

	};

	geocodeControl = L.control({position: 'topleft'});
	geocodeControl.onAdd = function(map) {
		this._div = L.DomUtil.create('div', 'geocodeControl');
		this._div.innerHTML = '<input type="text" class="geocode" id="geocode" value="Search Location...">'

		// add listeners
		this._div.addEventListener('mouseover', function () {
			map.dragging.disable(), map.touchZoom.disable(),
			map.scrollWheelZoom.disable(), map.doubleClickZoom.disable()
		});

		this._div.addEventListener('mouseout', function () {
			map.dragging.enable(), map.touchZoom.enable(),
			map.scrollWheelZoom.enable(), map.doubleClickZoom.enable()

		});

		this._div.addEventListener('keypress', function() {
			if (event.keyCode == 13) {
				console.log(event)
				geocodeAddress();
			}
		});

		return this._div;
	}
	geocodeControl.addTo(map)
	////////////////////////////////////////////

	////////////////////////////////////////////
	// this will get the bounds of the map on the initial page load
	var bounds = map.getBounds();
	console.log("Initial Bounds: ", bounds);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// this will subsequently get the bounds of the
	// map on further map changes
	map.on('moveend', function (e) {
		console.log("")
		console.log("Map Moved (New Bounds):")
		console.log("Event: moveend", map.getBounds()); 
		console.log("Zoom: ", map.getZoom())
		console.log("Center: ", map.getCenter().lat, map.getCenter().lng)
	});
	////////////////////////////////////////////


	////////////////////////////////////////////
	// draw tool
	// Initialise the FeatureGroup to store editable layers
	var tempDrawn = new L.FeatureGroup();
	var tempStaging = new L.FeatureGroup();
	var userLayer = new L.FeatureGroup()
	map.addLayer(tempDrawn, tempStaging, userLayer);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
	    edit: { featureGroup: tempDrawn }, 
	    draw: { polyline: false,
				edit: { edit: false }

			  }
	});

	map.addControl(drawControl);

	map.on('draw:created', function (e) {
		
		layerType = e.layerType;
		layer = e.layer;
		
		console.log("Layer Type: ", layerType)

			if (map.hasLayer(isoChrone)) { 
				console.log("IsoLayer Removed")
				map.removeLayer(isoChrone) 
			};

		if (["polygon", "rectangle"].indexOf(layerType) >= 0) {	

			var isoChronePoints = [];
			for (n = 0; n < layer._latlngs.length; n++) {
				console.log(layer._latlngs[n].lat, layer._latlngs[n].lng, "(lat/lng)")
				isoChronePoints.push(L.latLng(layer._latlngs[n].lat, layer._latlngs[n].lng))
			}
			isoChrone = L.polygon(isoChronePoints, {color: 'red'}).addTo(map);

		} else if (layerType === "circle") {
			isoChrone = L.circle(L.latLng(layer._latlng.lat, layer._latlng.lng), layer._mRadius).addTo(map)
		} else if (layerType === "marker") {
			latitude = e.layer._latlng.lat
			longitude = e.layer._latlng.lng

			// add marker to map for initial location
			map.removeLayer(marker)

			marker = L.marker([latitude, longitude], {
				bounceOnAdd: true, 
				bounceOnAddOptions: { duration: 3000, height: 700 }
			}).addTo(map).bindPopup('<center>Location: ' + latitude + ', ' + longitude + ' (lat/lng)</center>');

			if (map.hasLayer(isoChrone)) { 
				console.log("IsoLayer Removed")
				map.removeLayer(isoChrone) 
			};

			createIsochrone(latitude, longitude, "PT0H10M", {color: 'red'}, true, true)
			alertify.success("Drive Time Polygon Created")
		}

		//alertify.success(layerType + " created")

		
	})
	////////////////////////////////////////////



</script>



</body>
</html>

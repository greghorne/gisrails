<!DOCTYPE html>
<html>
<head>
  <title>Mappy Data</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  <script src="http://maps.google.com/maps/api/js?v=3&sensor=false"></script>
	<style type="text/css">
	 	html, body {
				height: 100%;
				width: 100%;
		}
		#map { height: 100%; }
		.geocodeControl {
			position: absolute;
			top: 5%;
  			left: 100%;
		}
	</style>
</head>
<body>
<div id='map'>
	<input type='textbox'></input>
</div>

<script type="text/javascript">

	////////////////////////////////////////////
	// init osm map layer
	var attributionOSM = '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors';
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init osm map layer
	var osm = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	})
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init black and white map layer
	var blackAndWhite = L.tileLayer(
	    'http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png', {
	    attribution: attributionOSM,
	    subdomains: ['a', 'b', 'c']
	});
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init google map layers
	var googleRoadmap = new L.Google('ROADMAP');
	var googleSatellite = new L.Google('SATELLITE');
	var googleTerrain = new L.Google('TERRAIN')
	var googleHybrid = new L.Google('HYBRID')
	////////////////////////////////////////////

	////////////////////////////////////////////
	// init census block map layer		
	var censusBlockGroups = new L.TileLayer.WMS("http://tigerweb.geo.census.gov/arcgis/services/TIGERweb/tigerWMS_Census2010/MapServer/WMSServer",
	{
	  layers: 'Census Block Groups',
	  format: 'image/png',
	  transparent: true,
	  detectRetina: true,
	  //unloadInvisibleTiles: true,
	  reuseTiles: true,
	  // attribution: TigerAttribution
	});
	//censusBlockGroups.addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// set intial lat, long to center of the U.S.
	var latitude = 35.746512259918504
	var longitude = -96.9873046875
	var zoom = 4
	////////////////////////////////////////////

	////////////////////////////////////////////
	// determine geolocation of user
	var options = { timeout: 7000 };

	function success(location) {

		var latitude = location.coords.latitude;
		var longitude = location.coords.longitude;

		var myLatLng = L.latLng(location.coords.latitude, location.coords.longitude);
		map.setView(myLatLng, 14)

		////////////////////////////////////////////
		// add marker to map for initial location
		L.marker([latitude, longitude], {
			bounceOnAdd: true, 
			bounceOnAddOptions: { duration: 3000, height: 700 }
		}).addTo(map).bindPopup('<center>Your approximate location<br>(More or less ' + location.coords.accuracy + '  metres)</center>');

		////////////////////////////////////////////


	};

	function error(error) {
		console.log(error)
	}

	navigator.geolocation.getCurrentPosition(success, error, options)
	////////////////////////////////////////////


	////////////////////////////////////////////
	// init map, corresponds to map container(div id = map)
	var map = L.map('map', {
	    center: [latitude, longitude],
		zoom: zoom,
		layers: [osm],
		loadingControl: true
	});

	////////////////////////////////////////////
	// add Open Street Maps Building (3-D Buildings)
	var osmBuildings = new OSMBuildings(map).load();
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add scale bar to map	
	L.control.scale().addTo(map);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// add layer control tool to map
	var baseMaps = {
		'Open Street Map': osm,
		'Monochrome Map': blackAndWhite,
		'Google Roadmap': googleRoadmap,
		'Google Terrain': googleTerrain,
		'Google Hybrid': googleHybrid
		//'Google Satellite': googleSatellite

	}
	// define overlays
	var overLays = {
		'3-D Buildings': osmBuildings,
		'Block Groups': censusBlockGroups
	}
	// create the layer control widget on the map
	L.control.layers(baseMaps, overLays).addTo(map);
	////////////////////////////////////////////

	geocodeControl = L.control({position: 'topleft'});
	geocodeControl.onAdd = function(map) {
		this._div = L.DomUtil.create('div', 'geocodeControl');
		this._div.innerHTML = '<input type="text" class="geocode" id="geocode" value="Find Location...">'
		return this._div;
	}
	geocodeControl.addTo(map)

	// var me = document.getElementByID('geocode')

	// document.getElementByID('geocode').addEventListener('mouseover', function () {map.dragging.disable()})

	// document.getElementByID('geocode').addEventListener('onmouseout', function () {map.dragging.enable()})


	// function controlOver(e) { map.dragging.disable(); }
	// function controlNotOver() { map.dragging.enable(); }

	// document.getElementByID("geocode").onmouseover = controlOver();
	// document.getElementByID("geocode").onmouseout = controlNotOver();



	////////////////////////////////////////////
	// this will get the bounds of the map on the initial page load
	var bounds = map.getBounds();
	console.log("Initial Bounds: ", bounds);
	////////////////////////////////////////////

	////////////////////////////////////////////
	// this will subsequently get the bounds of the
	// map on further map changes
	map.on('moveend', function (e) {
		console.log("")
		console.log("Map Moved (New Bounds):")
		console.log("Event: moveend", map.getBounds()); 
		console.log("Zoom: ", map.getZoom())
		console.log("Center: ", map.getCenter().lat, map.getCenter().lng)
	});
	////////////////////////////////////////////


	////////////////////////////////////////////
	// draw tool
	// Initialise the FeatureGroup to store editable layers
	var tempDrawn = new L.FeatureGroup();
	var tempStaging = new L.FeatureGroup();
	var userLayer = new L.FeatureGroup()
	map.addLayer(tempDrawn, tempStaging, userLayer);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
	    edit: { featureGroup: tempDrawn }, 
	    draw: { polyline: false,
				marker: false,
				edit: { edit: false }

			  }
	});

	map.addControl(drawControl);

	map.on('draw:created', function (e) {
		
		layerType = e.layerType;
		layer = e.layer;
		
		console.log("Layer Type: ", layerType)

		if (["polygon", "rectangle"].indexOf(layerType) >= 0) {	
			// dump coordinates of polygon
			for (n = 0; n < layer._latlngs.length; n++) {
				console.log(layer._latlngs[n].lat, layer._latlngs[n].lng, "(lat/lng)")
			}
		} else if (layerType === "circle") {
			console.log(layer._latlng.lat, layer._latlng.lng, ("center"))
			console.log(layer._mRadius, " radius (metres)")
		}

		alertify.success(layerType + " created")
		
	})
	////////////////////////////////////////////
</script>



</body>
</html>
